{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","gif","id","title","images","downsized_medium","console","error","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifApp","i","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAbhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,sEAEbC,EAFa,gDAEkCC,UACnDH,GAHiB,8DAKDI,MAAMF,GALL,cAKbG,EALa,gBAMIA,EAAIC,OANR,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZnB,kBAgBZM,GAhBY,kCAkBnBO,QAAQC,MAAR,MAlBmB,0DAAH,sDCEPC,EAAc,SAAC,GAAoB,IAAlBL,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFGS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEqB,KAAM,GAAIe,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAWxC,OARAC,qBAAU,WACR1B,EAAQC,GAAU0B,MAAK,SAAClB,GAAD,OACrBgB,EAAS,CACPjB,KAAMC,EACNc,SAAS,SAGZ,CAACtB,IACGuB,EDTyBI,CAAa3B,GAA/BQ,EADyB,EAC/BD,KAAYe,EADmB,EACnBA,QACpB,OACE,eAAC,WAAD,WACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,EACC,4CAEA,qBAAKJ,UAAU,YAAf,SACGV,EAAKC,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEXrBiB,EAAS,WAAO,IAAD,EACU1C,mBAAS,CAAC,UADpB,mBACnBQ,EADmB,KACPT,EADO,KAG1B,OACE,eAAC,WAAD,WACE,yCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACGS,EAAWe,KAAI,SAACT,EAAU6B,GAAX,OACd,cAAC,EAAD,CAAiB7B,SAAUA,GAAb6B,Y,MCVxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8ecf7d1e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func,\n};\n","export const getGifs = async (category) => {\n  try {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(\n      category\n    )}&limit=5&api_key=wUYcXQkzCJcCnSC27AJ22ilP6UpicLxr`;\n    const res = await fetch(url);\n    const { data } = await res.json();\n\n    const gifs = data.map((gif) => {\n      return {\n        id: gif.id,\n        title: gif.title,\n        url: gif.images?.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Fragment } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\nexport const GifGrid = ({ category }) => {\n  const { data: gifs, loading } = useFetchGifs(category);\n  return (\n    <Fragment>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading ? (\n        <p>Cargando...</p>\n      ) : (\n        <div className=\"card-grid\">\n          {gifs.map((gif) => (\n            <GifGridItem key={gif.id} {...gif} />\n          ))}\n        </div>\n      )}\n    </Fragment>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((gifs) =>\n      setState({\n        data: gifs,\n        loading: false,\n      })\n    );\n  }, [category]);\n  return state;\n};\n","import React, { Fragment, useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifApp = () => {\n  const [categories, setCategories] = useState([\"Akame\"]);\n\n  return (\n    <Fragment>\n      <h2>Gif App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, i) => (\n          <GifGrid key={i} category={category} />\n        ))}\n      </ol>\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifApp } from \"./GifApp\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}